"use client";

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import type { PaginationMeta } from "@/lib/redux/types";

export type UserRow = {
    userId: string;
    fullName: string;
    email: string;
    phoneNumber: string | null;
    avatarUrl: string | null;
    role: "ADMIN" | "OWNER" | "CLIENT";
    status: boolean;
};

export type UsersPayload = {
    items: UserRow[];
    meta: PaginationMeta;
};

export type FetchUsersParams = {
    page: number;
    limit: number;
    role?: "ADMIN" | "OWNER" | "CLIENT"; // <- ràng buộc type rõ ràng (không có "ALL")
    search?: string;
};

// ================== FETCH LIST ==================
export const fetchUsers = createAsyncThunk<
    UsersPayload,
    FetchUsersParams,
    { rejectValue: string }
>("users/fetchUsers", async (params, { rejectWithValue }) => {
    try {
        const qs = new URLSearchParams({
            page: String(params.page),
            limit: String(params.limit),
            ...(params.role ? { role: params.role } : {}),
            ...(params.search ? { search: params.search } : {}),
        }).toString();

        // gọi API nội bộ (proxy)
        const res = await fetch(`/api/manage/users?${qs}`, { method: "GET" });

        if (!res.ok) {
            const txt = await res.text();
            return rejectWithValue(txt || "Tải danh sách người dùng thất bại");
        }

        const json = (await res.json()) as {
            status: string;
            statusCode: number;
            data: UsersPayload;
        };

        return json.data;
    } catch (err: unknown) {
        const msg = err instanceof Error ? err.message : "Network error";
        return rejectWithValue(msg);
    }
});

export const updateUserStatus = createAsyncThunk<
    { userId: string; status: boolean },
    { userId: string; status: boolean },
    { rejectValue: string }
>("users/updateStatus", async ({ userId, status }, { rejectWithValue }) => {
    try {
        // DÙNG CÙNG PROXY như fetchUsers
        const res = await fetch(`/api/manage/users/${userId}/status`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ status }),
        });

        if (!res.ok) {
            const txt = await res.text();
            return rejectWithValue(txt || "Cập nhật trạng thái thất bại");
        }

        return { userId, status };
    } catch (err: unknown) {
        return rejectWithValue(err instanceof Error ? err.message : "Network error");
    }
});

type UsersState = {
    items: UserRow[];
    meta: PaginationMeta | null;
    loading: boolean;
    error: string | null;
};

const initialState: UsersState = {
    items: [],
    meta: null,
    loading: false,
    error: null,
};

const usersSlice = createSlice({
    name: "users",
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            // list
            .addCase(fetchUsers.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(fetchUsers.fulfilled, (state, action) => {
                state.loading = false;
                state.items = action.payload.items;
                state.meta = action.payload.meta;
            })
            .addCase(fetchUsers.rejected, (state, action) => {
                state.loading = false;
                state.error = (action.payload as string) ?? "Tải danh sách người dùng thất bại";
            });

        // update status (optimistic update trong fulfilled)
        builder.addCase(updateUserStatus.fulfilled, (state, action) => {
            const { userId, status } = action.payload;
            const u = state.items.find((x) => x.userId === userId);
            if (u) u.status = status;
        });
    },
});

export default usersSlice.reducer;
